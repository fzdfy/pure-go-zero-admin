// Code generated by goctl. DO NOT EDIT.

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"pure-go-zero-admin/common/enumx"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysMenuFieldNames          = builder.RawFieldNames(&SysMenu{})
	sysMenuRows                = strings.Join(sysMenuFieldNames, ",")
	sysMenuRowsExpectAutoSet   = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysMenuRowsWithPlaceHolder = strings.Join(stringx.Remove(sysMenuFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysMenuModel interface {
		Insert(ctx context.Context, data *SysMenu) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysMenu, error)
		FindAll(ctx context.Context, data *SysMenu, Current int64, PageSize int64) (*[]SysMenu, error)
		FindAllByUserId(ctx context.Context, userId int64) (*[]SysMenu, error)
		Count(ctx context.Context, data *SysMenu) (int64, error)
		Update(ctx context.Context, data *SysMenu) error
		Delete(ctx context.Context, id int64) error
		DeleteMenu(ctx context.Context, data *SysMenu ) error
	}

	defaultSysMenuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysMenu struct {
		Id             int64          `db:"id"`        // 编号
		Name           string `db:"name"`      // 菜单名称
		ParentId       int64  `db:"parent_id"` // 父菜单ID，一级菜单为0
		Path           string `db:"path"`
		Perms          string `db:"perms"`            // 授权(多个用逗号分隔，如：sys:user:add,sys:user:edit)
		Type           int64  `db:"type"`             // 类型   0：目录   1：菜单   2：按钮
		Icon           string `db:"icon"`             // 菜单图标
		OrderNum       int64  `db:"order_num"`        // 排序
		CreateBy       string `db:"create_by"`        // 创建人
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		LastUpdateBy   string `db:"last_update_by"`   // 更新人
		LastUpdateTime time.Time   `db:"last_update_time"` // 更新时间
		DelFlag        int64          `db:"del_flag"`         // 是否删除  -1：已删除  0：正常
		Status         int64          `db:"status"`           // 状态  1:启用,0:禁用
	}
)

func newSysMenuModel(conn sqlx.SqlConn) *defaultSysMenuModel {
	return &defaultSysMenuModel{
		conn:  conn,
		table: "`sys_menu`",
	}
}

func (m *defaultSysMenuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysMenuModel) DeleteMenu(ctx context.Context, data *SysMenu ) error {
	query := fmt.Sprintf("update %s set `del_flag` = ? , `last_update_by` = ?, `last_update_time` = ? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.DelFlag, data.LastUpdateBy, data.LastUpdateTime, data.Id)
	return err
}

func (m *defaultSysMenuModel) FindOne(ctx context.Context, id int64) (*SysMenu, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysMenuRows, m.table)
	var resp SysMenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) FindAll(ctx context.Context, data *SysMenu, Current int64, PageSize int64) (*[]SysMenu, error) {
	search := ""
	if len(data.Name) > 0 {
		search += fmt.Sprintf(" and `name` LIKE '%s'", "%"+data.Name+"%")
	}
	if len(data.Path) > 0 {
		search += fmt.Sprintf(" and `path` LIKE '%s'", "%"+data.Path+"%")
	}
	if enumx.CheckValueInUserStatusEnum(data.Status) {
		search += fmt.Sprintf(" and `status` = %d", data.Status)
	}

	query := fmt.Sprintf("select %s from %s where `del_flag` = 0 %s limit ?,?", sysMenuRows, m.table, search)
	var resp []SysMenu
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) FindAllByUserId(ctx context.Context, userId int64) (*[]SysMenu, error) {
	query := "select sm.* from sys_user_role sur left join sys_role sr on sur.role_id = sr.id left join sys_role_menu srm on sr.id = srm.role_id left join sys_menu sm on srm.menu_id = sm.id where sur.user_id=? order by sm.id"
	var resp []SysMenu
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysMenuModel) Count(ctx context.Context, data *SysMenu) (int64, error) {
	search := ""
	if len(data.Name) > 0 {
		search += fmt.Sprintf(" and `name` LIKE '%s'", "%"+data.Name+"%")
	}
	if len(data.Path) > 0 {
		search += fmt.Sprintf(" and `path` LIKE '%s'", "%"+data.Path+"%")
	}
	if enumx.CheckValueInUserStatusEnum(data.Status) {
		search += fmt.Sprintf(" and `status` = %d", data.Status)
	}

	query := fmt.Sprintf("select count(*) as count from %s where `del_flag` = 0 %s", m.table, search)

	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)

	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSysMenuModel) Insert(ctx context.Context, data *SysMenu) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, sysMenuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Path, data.Perms, data.Type, data.Icon, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag)
	return ret, err
}

func (m *defaultSysMenuModel) Update(ctx context.Context, data *SysMenu) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysMenuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Path, data.Perms, data.Type, data.Icon, data.OrderNum, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Id)
	return err
}

func (m *defaultSysMenuModel) tableName() string {
	return m.table
}
