// Code generated by goctl. DO NOT EDIT.

package sysmodel

import (
	"context"
	"database/sql"
	"fmt"
	"pure-go-zero-admin/common/enumx"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysRoleFieldNames          = builder.RawFieldNames(&SysRole{})
	sysRoleRows                = strings.Join(sysRoleFieldNames, ",")
	sysRoleRowsExpectAutoSet   = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	sysRoleRowsWithPlaceHolder = strings.Join(stringx.Remove(sysRoleFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	sysRoleModel interface {
		Insert(ctx context.Context, data *SysRole) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysRole, error)
		FindAll(ctx context.Context, data *SysRole, Current int64, PageSize int64) (*[]SysRole, error)
		Count(ctx context.Context, data *SysRole) (int64, error)
		Update(ctx context.Context, data *SysRole) error
		Delete(ctx context.Context, id int64) error
		DeleteRole(ctx context.Context, data *SysRole ) error
	}

	defaultSysRoleModel struct {
		conn  sqlx.SqlConn
		table string
	}

	SysRole struct {
		Id             int64          `db:"id"`               // 编号
		Name           string `db:"name"`             // 角色名称
		Remark         string `db:"remark"`           // 备注
		CreateBy       string `db:"create_by"`        // 创建人
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		LastUpdateBy   string `db:"last_update_by"`   // 更新人
		LastUpdateTime time.Time   `db:"last_update_time"` // 更新时间
		DelFlag        int64          `db:"del_flag"`         // 是否删除  -1：已删除  0：正常
		Status         int64          `db:"status"`           // 状态  1:启用,0:禁用
	}
)

func newSysRoleModel(conn sqlx.SqlConn) *defaultSysRoleModel {
	return &defaultSysRoleModel{
		conn:  conn,
		table: "`sys_role`",
	}
}

func (m *defaultSysRoleModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultSysRoleModel) DeleteRole(ctx context.Context, data *SysRole ) error {
	query := fmt.Sprintf("update %s set `del_flag` = ? , `last_update_by` = ?, `last_update_time` = ? where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, data.DelFlag, data.LastUpdateBy, data.LastUpdateTime, data.Id)
	return err
}

func (m *defaultSysRoleModel) FindOne(ctx context.Context, id int64) (*SysRole, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", sysRoleRows, m.table)
	var resp SysRole
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) FindAll(ctx context.Context, data *SysRole, Current int64, PageSize int64) (*[]SysRole, error) {

	search := ""
	if len(data.Name) > 0 {
		search += fmt.Sprintf(" and `name` LIKE '%s'", "%"+data.Name+"%")
	}

	if enumx.CheckValueInUserStatusEnum(data.Status) {
		search += fmt.Sprintf(" and `status` = %d", data.Status)
	}

	query := fmt.Sprintf("select %s from %s where `del_flag` = 0 %s limit ?,?", sysRoleRows, m.table, search)
	//query := "select sys_user.*, ifnull(sj.job_name,'') as job_name, ifnull(sd.name ,'')as dept_name, ifnull(sys_role.name,'') as role_name,ifnull(sys_role.id ,'1')as role_id from sys_user   left join sys_user_role sur on sys_user.id = sur.user_id   left join sys_role on sur.role_id = sys_role.id    left join sys_job sj on sys_user.job_id = sj.id left join sys_dept sd on sys_user.dept_id = sd.id limit ?,?"
	var resp []SysRole
	err := m.conn.QueryRowsCtx(ctx, &resp, query, (Current-1)*PageSize, PageSize)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysRoleModel) Count(ctx context.Context, data *SysRole) (int64, error) {

	search := ""
	if len(data.Name) > 0 {
		search += fmt.Sprintf(" and `name` LIKE '%s'", "%"+data.Name+"%")
	}

	if enumx.CheckValueInUserStatusEnum(data.Status) {
		search += fmt.Sprintf(" and `status` = %d", data.Status)
	}

	query := fmt.Sprintf("select count(*) as count from %s where `del_flag` = 0 %s", m.table, search)

	var count int64
	err := m.conn.QueryRowCtx(ctx, &count, query)

	switch err {
	case nil:
		return count, nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultSysRoleModel) Insert(ctx context.Context, data *SysRole) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, sysRoleRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Remark, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Status)
	return ret, err
}

func (m *defaultSysRoleModel) Update(ctx context.Context, data *SysRole) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, sysRoleRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Remark, data.CreateBy, data.LastUpdateBy, data.LastUpdateTime, data.DelFlag, data.Status, data.Id)
	return err
}

func (m *defaultSysRoleModel) tableName() string {
	return m.table
}
